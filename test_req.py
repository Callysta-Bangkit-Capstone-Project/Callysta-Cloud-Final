import requests
import base64
import json

# Define your input data
input_data = {
    'image': 'iVBORw0KGgoAAAANSUhEUgAAAXsAAAFfCAYAAACvA2wrAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABaYSURBVHhe7d15bJVVwsdxheAfNSEYEUkk4hIITSEmoECQoJFGMAZFmLAFKAhYIKyCIAGiLLIIBQSKNOyVfSlp2QLIblkMS5FVLKtsIiCFsgRazrzn8Tivyim9be95tvP9JL9MZsaZnsC937a3t8/zhAAAhB6xBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEHsAsACxBwALEPsSun37tsjKyhIbN25kBWzv3r1iz5494ujRo+L8+fMiJydHPHz4UP0JAnADsS+GjIwM8dlnn4m6deuKJ554ghVjpUqVEpUqVRK1a9cWTZo0EZ06dXL+TMeMGSNSUlLE4sWLxbp160RmZqbYtm2b+P77751/L//sV6xY4fz33333nZg9e7ZYvny5mD9/vli2bJnz369fv15s3bpV7Ny5U+zbt08cOnRIXL16Vf3tAXYi9kVw5coV0bt3b228mP9XrVo1UbVqVdGrVy+xYMEC55MA32HAFsQ+QqtWrRLPPPOMNiIsuIuJiRGtWrUS06ZNc15qunPnjvobB8KF2EdAhl4XChbONW3aVCQlJYnp06eL1NRU52WjtWvXii1btjifEA4ePChOnDghfv31V/H777+L69evO9/1XbhwQZw9e1ZkZ2eL48ePO985HDhwQPz444/OS0p/vRyl+7mG3ybPy0tf4ULsCyGfxHxFz2ydfOmrZs2aYujQoWLNmjXqWYEgIvaF4DV6xv5/5cqVE8OGDRN3795VzxAEBbF/DPnODt0DnjHbFxcX57ysheAg9o8h3wqoe6Azxv6c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',
    'actual-answer': 'Z'
}

# Convert the input data to JSON
json_data = {
    'image': input_data['image'],
    'actual-answer': input_data['actual-answer']
}

# Convert the JSON data to base64
base64_data = base64.b64encode(json.dumps(json_data).encode('utf-8')).decode('utf-8')

# Set the URL of your cloud function
url = 'https://asia-southeast1-callysta-api.cloudfunctions.net/function-1'

# Send a POST request to the cloud function
response = requests.post(url, json={'image': base64_data})

# Check if the request was successful
if response.status_code == 200:
    # Parse the response JSON
    output_data = response.json()
    print(output_data)
else:
    print('Error:', response.text)
